// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MovieGenre {
  id        String   @id @default(cuid())  
  name      String
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  movies    Movie[]  @relation("MovieGenre")
}


model MovieType {
  id        String   @id @default(cuid())  
  type      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  @default(now())
  movies    Movie[]  
}

model Movie {
  id            String        @id @default(cuid())  
  name          String
  description   String
  releaseYear   Int
  duration      Int
  thumbnailUrl  String
  hlsFilePathS3 String
  views         Int
  likes         Int
  dislikes      Int
  status        MovieStatus   @default(UPLOADED)
  generes       MovieGenre[]  @relation("MovieGenre")
  isPublished   Boolean       @default(false)
  typeId        String        
  type          MovieType     @relation(fields: [typeId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model User {
  id        String   @id @default(cuid())  
  email     String   @unique
  password  String
  name      String
  birthDate DateTime? 
  country   String?
  timeZone  String?
  bio       String? 
  gender    Gender?
  createdAt DateTime @default(now())
  totpSecret String?
  updatedAt DateTime @updatedAt @default(now())
  twoFaStatus twoFaStatus @default(DISABLED)
  recoveryCode String?
  avatarUrl String?
}

model RegistrationRequests {
  id        String   @id @default(cuid())  
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}


enum MovieStatus {
  UPLOADED  
  CONVERTING
  COMPLETED
}

enum Gender {
  Male
  Female
  Other
  PreferNotToSay
}

enum twoFaStatus {
  ENABLED
  DISABLED
}
